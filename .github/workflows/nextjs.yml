# To get started with Next.js see: https://nextjs.org/docs/getting-started
name: Next.js File Test and Deploy Authentication

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      # - name: Display Current Path
      #  run: |
      #    echo "Current path:"
      #    pwd
      # - name: List Files In Directory
      #  run: ls -la
      # - name: Find package.json
      #  run: find /frontend -name "package.json"
      #    cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      #- name: Restore cache
      #  uses: actions/cache@v4
      #  with:
      #    path: |
      #      .next/cache
          # Generate a new cache whenever packages or source files change.
      #    key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
      #    restore-keys: |
      #      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: npm install 
        working-directory: ./frontend #${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: .next
          key: ${{ runner.os }}-next-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-next-build-
      - name: Build with Next.js
        run: npm run build 
        working-directory: ./frontend #${{ steps.detect-package-manager.outputs.runner }} npm run build # Error below: could not find the file package.json. Must find path to frontend directory.
      #- name: Upload artifact
      #  uses: actions/upload-pages-artifact@v3
      #  with:
      #    path: ./out

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy authentication
        id: deployment
        uses: actions/deploy-pages@v4

  # Runs on pushes targeting the default branch
  #:
  #  branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
#concurrency:
#  group: "pages"
#  cancel-in-progress: false

#jobs:
  # Build job
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Detect package manager
#        id: detect-package-manager
#        run: |
#          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
#            echo "manager=yarn" >> $GITHUB_OUTPUT
#            echo "command=install" >> $GITHUB_OUTPUT
#            echo "runner=yarn" >> $GITHUB_OUTPUT
#            exit 0
#          elif [ -f "${{ github.workspace }}/package.json" ]; then
#            echo "manager=npm" >> $GITHUB_OUTPUT
#            echo "command=ci" >> $GITHUB_OUTPUT
#            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#            exit 0
#          else
#            echo "Unable to determine package manager"
#            exit 1
#          fi
#      - name: Setup Node
#        uses: actions/setup-node@v4
#        with:
#          node-version: "20"
#          cache: ${{ steps.detect-package-manager.outputs.manager }}
#      - name: Setup Pages
#        uses: actions/configure-pages@v5
#        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
#          static_site_generator: next
#      - name: Restore cache
#        uses: actions/cache@v4
#        with:
#          path: |
#            .next/cache
          # Generate a new cache whenever packages or source files change.
#          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
#          restore-keys: |
#            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
#      - name: Install dependencies
#        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
#      - name: Build with Next.js
#        run: ${{ steps.detect-package-manager.outputs.runner }} next build
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: ./out

  # Deployment job
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4
